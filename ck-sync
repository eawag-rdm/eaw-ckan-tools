#!/bin/bash

## harald.vonwaldow@eawag.ch - 2016-05-20
## synchronise the local development server ("$TARGET") with a remote CKAN instance (production, "$SOURCE")

## ATTENTION! #####################################
##                    This is going delete stuff on your local machine                    #
###############################################

# We assume the local development setup belongs to the user running this script.
# We assume there is passwordless ssh-login set up for this user on the $TARGET.
# We assume the local user has passwordless sudo set up.

source "/usr/lib/ckan/default/bin/activate"

# A temporary storage place for a database-dump
DUMPDIR="/data/dbdumps"

# Host to synchronize with (production, remote)
SOURCE_HOST="eaw-ckan-dev1.eawag.wroot.emp-eaw.ch"

# CKAN configuration file on that host
SOURCE_CONFIG="/etc/ckan/default/production.ini"

# Absolute path to Filestore on remote
SOURCE_FILESTORE="/var/lib/ckan/default"

# Target host
# This must be localhost, otherwise script needs to be adapted!
TARGET_HOST="localhost"

# Absolute path to Filestore on localhost
TARGET_FILESTORE="/var/lib/ckan/default"

# local CKAN configuration file
TARGET_CONFIG="/etc/ckan/default/development.ini"

# Local path to PosGIS vendor scripts
POSTGIS_PATH="/usr/share/postgresql/9.5/contrib/postgis-2.2"

# read DB configurations from ckan configuration files
ckan_read_db_config() {
    read TARGET_DB_USER TARGET_DB_PW TARGET_DB <<< $(grep sqlalchemy.url $TARGET_CONFIG |sed 's/^.*postgresql:\/\/\(.*\):\(.*\)@localhost\/\(.*\)$/\1 \2 \3/')
    echo "CKAN DB config TARGET: db-user:  $TARGET_DB_USER db-password: $TARGET_DB_PW db-name: $TARGET_DB"
    read SOURCE_DB_USER SOURCE_DB_PW SOURCE_DB <<< $(ssh $SOURCE_HOST grep sqlalchemy.url $SOURCE_CONFIG |sed 's/^.*postgresql:\/\/\(.*\):\(.*\)@localhost\/\(.*\)$/\1 \2 \3/')
    echo "CKAN DB config SOURCE: db-user:  $SOURCE_DB_USER db-password: $SOURCE_DB_PW db-name: $SOURCE_DB"
}

# comment/uncomment all plugins in local configuration
ckan_config_comment_plugins() {
    if [ "$1" = "comment" ]; then
	cmd='s/^/#/'
    elif [ "$1" = "uncomment" ]; then
	cmd='s/^#//'
    fi

    echo "$1 plugins in $TARGET_CONFIG"

    sed -i '/ckan.plugins *=/,/=/ {
            /ckan.plugins *=/ '$cmd'
            /=/ ! '$cmd'
        }' $TARGET_CONFIG
}

db_dump_remote() {
    echo "dumping database $SOURCE_DB on $SOURCE_HOST:"
    pg_dump -v -h "$SOURCE_HOST" -U "$SOURCE_DB_USER" "$SOURCE_DB" > "${DUMPDIR}/ckan_dump.sql"
    echo
}

## destroy local ckan-DB, drop ckan db-user
db_destroy_local() {
    dropdb -h "$TARGET_HOST" -U "$TARGET_DB_USER" "$TARGET_DB"
    echo "dropped DB: $TARGET_HOST:$TARGET_DB"
    sudo -u postgres dropuser $TARGET_DB_USER
    echo "dropped local user: $TARGET_DB_USER"
    echo
}

## To set up a virgin postgres installation
db_setup_local() {
    echo "Creating user $TARGET_DB_USER with password $TARGET_DB_PW"
    sudo -u postgres psql -c "CREATE USER $TARGET_DB_USER WITH PASSWORD '$TARGET_DB_PW'"
    sudo -u postgres createdb -O $TARGET_DB_USER $TARGET_DB -E utf-8
    echo
}

# Initialize PostGIS
postgis_init() {
    echo "Initializing PostGIS"
    sudo -u postgres psql -d $TARGET_DB -f ${POSTGIS_PATH}/postgis.sql
    sudo -u postgres psql -d $TARGET_DB -f ${POSTGIS_PATH}/spatial_ref_sys.sql
    sudo -u postgres psql -d $TARGET_DB -c "ALTER VIEW geometry_columns OWNER TO $TARGET_DB_USER;"
    sudo -u postgres psql -d $TARGET_DB -c "ALTER TABLE spatial_ref_sys OWNER TO $TARGET_DB_USER;"
    echo
}

## Initialize local DB with CKAN tables
db_init_local() {
    echo "initializing local CKAN-DB"
    cd /usr/lib/ckan/default/src/ckan
    paster --plugin=ckan db init -c $TARGET_CONFIG
    echo
}

## clear solr index
solr_clear_index() {
    echo  "Clearing SOLR search-index"
    cd /usr/lib/ckan/default/src/ckan
    paster --plugin=ckan search-index clear -c $TARGET_CONFIG
    echo
}

## clean CKAN tables in local database
## Strictly not necessary if starting from virgin DB
db_clean_local() {
    echo "cleaning local CKAN database:"
    paster --plugin=ckan db clean -c $TARGET_CONFIG
    echo
}

## load sdumped file into
db_load() {
    echo "Loading ${DUMPDIR}/ckan_dump.sql into local CKAN database:"
    paster --plugin=ckan db load -c $TARGET_CONFIG  "${DUMPDIR}/ckan_dump.sql"
    rm "${DUMPDIR}/ckan_dump.sql"
    echo
}

# (re-)build index of SOLR
solr_reindex() {
    echo "re-indexing SOLR"
    paster --plugin=ckan search-index rebuild -c $TARGET_CONFIG
    echo
}

# deletes all file in local filestore
filestore_fetch() {
    echo "Do you really want to remove ${TARGET_FILESTORE}/*? (N/y)"
    read ok
    if [ "$ok" = "y" ]; then
	echo "removing $TARGET_FILESTORE"
	rm -rf ${TARGET_FILESTORE}/*
	echo "rsyncing the filestore"
	rsync -rlptv $SOURCE_HOST:$SOURCE_FILESTORE/ $TARGET_FILESTORE
    else
	echo "aborting synchronization of Filestore"
    fi
    echo
}

ckan_sync() {
    ckan_read_db_config
    ckan_config_comment_plugins comment
    db_dump_remote
    db_destroy_local
    db_setup_local
    postgis_init
    db_init_local
    solr_clear_index
    db_clean_local
    db_load
    solr_reindex
    ckan_config_comment_plugins uncomment
    filestore_fetch
}

ckan_sync


